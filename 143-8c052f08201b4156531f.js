(window.webpackJsonp=window.webpackJsonp||[]).push([[143],{1010:function(e,t,n){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==a(e)&&"function"!=typeof e)return{default:e};var t=u();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var i=o?Object.getOwnPropertyDescriptor(e,r):null;i&&(i.get||i.set)?Object.defineProperty(n,r,i):n[r]=e[r]}n.default=e,t&&t.set(e,n);return n}(n(0)),r=d(n(2)),i=d(n(4)),l=n(135),c=d(n(1015)),p=d(n(236)),s=n(21),m=d(n(1016));function d(e){return e&&e.__esModule?e:{default:e}}function u(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return u=function(){return e},e}function h(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],a=!0,o=!1,r=void 0;try{for(var i,l=e[Symbol.iterator]();!(a=(i=l.next()).done)&&(n.push(i.value),!t||n.length!==t);a=!0);}catch(e){o=!0,r=e}finally{try{a||null==l.return||l.return()}finally{if(o)throw r}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return f(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(e);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return f(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,a=new Array(t);n<t;n++)a[n]=e[n];return a}var b=i.default.bind(m.default),g={example:r.default.element,exampleSrc:r.default.element,exampleCssSrc:r.default.element,title:r.default.string,description:r.default.node,isExpanded:r.default.bool},v=function(e){e.currentTarget.setAttribute("data-focus-styles-enabled","true")},x=function(e){e.currentTarget.setAttribute("data-focus-styles-enabled","false")},y=function(e){var t=e.example,n=e.exampleSrc,a=e.exampleCssSrc,r=e.title,i=e.description,m=e.isExpanded,d=h((0,o.useState)(m),2),u=d[0],f=d[1],g=h((0,o.useState)(!1),2),y=g[0],_=g[1],N=o.default.useContext(l.ThemeContext),O=void 0!==a,j=function(){_(!y),u&&f(!u)},w=function(){f(!u),y&&_(!y)},P=function(e,t){e.nativeEvent.keyCode!==s.KEY_SPACE&&e.nativeEvent.keyCode!==s.KEY_RETURN||(e.preventDefault(),t())};return o.default.createElement("div",{className:b("template",N.className)},o.default.createElement("div",{className:b("header")},r&&o.default.createElement("h2",{className:b("title")},r)),o.default.createElement("div",{className:b("content")},i&&o.default.createElement("div",{className:b("description")},i),t),o.default.createElement("div",{className:b("footer")},n?o.default.createElement("div",{className:b("button-container")},O&&o.default.createElement("button",{type:"button",className:b("css-toggle","item",{"is-selected":y}),onClick:j,onKeyDown:function(e){return P(e,j)},onBlur:v,onMouseDown:x,tabIndex:0,"data-focus-styles-enabled":!0},o.default.createElement(c.default,{className:b("chevron")}),o.default.createElement("span",null,"CSS"),o.default.createElement(p.default,{className:b("chevron")})),o.default.createElement("button",{type:"button",className:b("code-toggle","item",{"is-selected":u}),onClick:w,onKeyDown:function(e){return P(e,w)},onBlur:v,onMouseDown:x,tabIndex:0,"data-focus-styles-enabled":!0},o.default.createElement(c.default,{className:b("chevron")}),o.default.createElement("span",null,"Code"),o.default.createElement(p.default,{className:b("chevron")}))):null,o.default.createElement("div",null,y&&o.default.createElement("div",{className:b("css")},a),u&&o.default.createElement("div",{className:b("code")},n))))};y.propTypes=g,y.defaultProps={isExpanded:!1};var _=y;t.default=_},1011:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=l(n(0)),o=l(n(2)),r=l(n(4)),i=l(n(1012));function l(e){return e&&e.__esModule?e:{default:e}}var c=r.default.bind(i.default),p={name:o.default.string.isRequired,src:o.default.string,url:o.default.string,version:o.default.string.isRequired},s=function(e){var t=e.src,n=e.name,o=e.url,r=e.version,i=a.default.createElement("a",{className:c("badge"),href:o||"https://www.npmjs.org/package/".concat(n,"/v/").concat(r)},a.default.createElement("span",{className:c("badge-name")},o?"package":"npm"),a.default.createElement("span",{className:c("badge-version")},"v".concat(r))),l=t?a.default.createElement("a",{className:c("badge"),href:t},a.default.createElement("span",{className:c("badge-name")},"github"),a.default.createElement("span",{className:c("badge-version")},"source")):void 0;return a.default.createElement("div",{className:c("badge-container")},i,l)};s.propTypes=p;var m=s;t.default=m},1012:function(e,t,n){e.exports={badge:"Badges-module__badge___3m7y2","badge-container":"Badges-module__badge-container___1YxI5","badge-name":"Badges-module__badge-name___BQ3u4","badge-version":"Badges-module__badge-version___3OgwS"}},1013:function(e,t,n){"use strict";function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var o=function(e){if(e&&e.__esModule)return e;if(null===e||"object"!==a(e)&&"function"!=typeof e)return{default:e};var t=s();if(t&&t.has(e))return t.get(e);var n={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var i=o?Object.getOwnPropertyDescriptor(e,r):null;i&&(i.get||i.set)?Object.defineProperty(n,r,i):n[r]=e[r]}n.default=e,t&&t.set(e,n);return n}(n(0)),r=p(n(2)),i=p(n(4)),l=n(135),c=p(n(1014));function p(e){return e&&e.__esModule?e:{default:e}}function s(){if("function"!=typeof WeakMap)return null;var e=new WeakMap;return s=function(){return e},e}var m=i.default.bind(c.default),d={rows:r.default.arrayOf(r.default.shape({name:r.default.string,type:r.default.func,required:r.default.bool,defaultValue:r.default.string,description:r.default.func}))},u=function(e){var t=e.rows,n=(0,o.useContext)(l.ThemeContext);return o.default.createElement("table",{className:m("table",n.className)},o.default.createElement("thead",null,o.default.createElement("tr",{className:m("tr")},o.default.createElement("th",{className:m("th")},"Prop Name"),o.default.createElement("th",{className:m("th")},"Type"),o.default.createElement("th",{className:m("th")},"Is Required"),o.default.createElement("th",{className:m("th")},"Default Value"),o.default.createElement("th",{className:m("th")},"Description"))),o.default.createElement("tbody",null,t.map((function(e){return o.default.createElement("tr",{className:m("tr","props-tr"),key:e.name},o.default.createElement("td",{className:m(["td","strong","props-td"])},e.name),o.default.createElement("td",{className:m(["td","props-td"])},e.type()),o.default.createElement("td",{className:m(["td","props-td",e.required?["required"]:[]])},e.required?"required":"optional"),o.default.createElement("td",{className:m(["td","props-td"])},e.defaultValue),o.default.createElement("td",{className:m(["td","props-td"])},e.description()))}))))};u.propTypes=d;var h=u;t.default=h},1014:function(e,t,n){e.exports={"orion-fusion-theme":"PropsTable-module__orion-fusion-theme___1kDLT",a:"PropsTable-module__a___6WaJD",blockquote:"PropsTable-module__blockquote___2loIo",code:"PropsTable-module__code___1vedU",dd:"PropsTable-module__dd___3pYcW",dl:"PropsTable-module__dl___397p5",dt:"PropsTable-module__dt___1-GVs",h1:"PropsTable-module__h1___1OAAp",h2:"PropsTable-module__h2___2iZ6i",h3:"PropsTable-module__h3___3N0fw",h4:"PropsTable-module__h4___214vu",h5:"PropsTable-module__h5___1ajw8",h6:"PropsTable-module__h6___19W7i","icon-link":"PropsTable-module__icon-link___HUOC7",anchor:"PropsTable-module__anchor___1UTVD",hr:"PropsTable-module__hr___15B3j",img:"PropsTable-module__img___1rEq-",input:"PropsTable-module__input___1WHRX",kbd:"PropsTable-module__kbd___2DvPC",li:"PropsTable-module__li___1T8DQ",p:"PropsTable-module__p___3ssgC",ol:"PropsTable-module__ol___2tCva",ul:"PropsTable-module__ul___DlvOz",td:"PropsTable-module__td___3svU1",pre:"PropsTable-module__pre___3qXsS",strong:"PropsTable-module__strong___2DSlR",table:"PropsTable-module__table___1sV8g",th:"PropsTable-module__th___RQkAz",tr:"PropsTable-module__tr___1dras",icon:"PropsTable-module__icon___1fv-c",required:"PropsTable-module__required___1b3oJ","props-tr":"PropsTable-module__props-tr___1c88t","props-td":"PropsTable-module__props-td___dEhbY"}},1015:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var a=r(n(0)),o=r(n(20));function r(e){return e&&e.__esModule?e:{default:e}}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var l=function(e){var t=i({},e);return a.default.createElement(o.default,t,a.default.createElement("path",{d:"M10.3 24L33.8 0l3.9 3.8L18 24l19.7 20.2-3.9 3.8z"}))};l.displayName="IconChevronLeft",l.defaultProps={className:"",viewBox:"0 0 48 48",xmlns:"http://www.w3.org/2000/svg","data-name":"Layer 1",isBidi:!0};var c=l;t.default=c},1016:function(e,t,n){e.exports={"orion-fusion-theme":"ExampleTemplate-module__orion-fusion-theme___MlAIc",template:"ExampleTemplate-module__template___2Cn_e",header:"ExampleTemplate-module__header___1Uk65",content:"ExampleTemplate-module__content___2BfpO",description:"ExampleTemplate-module__description___17dwL",footer:"ExampleTemplate-module__footer___2qb8M","button-container":"ExampleTemplate-module__button-container___305lx",css:"ExampleTemplate-module__css___3yyDQ",code:"ExampleTemplate-module__code____AmLF","css-toggle":"ExampleTemplate-module__css-toggle___2I9Yn","code-toggle":"ExampleTemplate-module__code-toggle___25ONK","is-selected":"ExampleTemplate-module__is-selected___1H6Un",item:"ExampleTemplate-module__item___1N1C-",chevron:"ExampleTemplate-module__chevron___3Xlby",title:"ExampleTemplate-module__title___5hduh","dynamic-content":"ExampleTemplate-module__dynamic-content___1b8Fh"}},1215:function(e,t,n){"use strict";n.d(t,"a",(function(){return l}));var a=n(0),o=n.n(a),r=n(1011),i=n.n(r),l=function(e){var t=e.url;return o.a.createElement(i.a,{src:"https://github.com/cerner/terra-framework/tree/main/packages/terra-navigation-prompt",name:"terra-navigation-prompt",version:"1.39.0",url:t})}},2528:function(e,t,n){"use strict";var a=n(11),o=n(5);Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=o(n(76)),i=a(n(0)),l=o(n(2)),c=o(n(4)),p=a(n(386)),s=o(n(2529)),m=c.default.bind(s.default),d="Descriptive Notification Prompt Title",u="A Notification Prompt usually has an introductory warning instructing the user that there are unsaved changes or that there is a similar situation that warrants capturing the user's attention and requires that they take action before continuing.\n\nIt is good practice to include details about the originating source (page name, side-panel title, modal header title, etc.) and location description (form name, title from the section of the page, general position, etc.) to provide the user a contextual reference as to where they have an area needing attention: e.g. where data is about to be lost, the window about to be closed, the section about to be removed. Following the initial details, it is helpful to include a detailed description educating the user about any danger or caution as to what will happen to the current items about to be lost (form data, page content, etc.) if the user chooses each of the two actions provided in the notification prompt message.",h=function(e){var t=e.title,n=e.ariaLabel,a=(0,i.useState)(""),o=(0,r.default)(a,2),l=o[0],c=o[1],s=(0,i.useRef)({value:""});return i.default.createElement("div",{className:m("input-content-wrapper")},l&&l.length?i.default.createElement(p.default,{description:t,metaData:s.current}):null,i.default.createElement("div",{className:m("content-wrapper")},i.default.createElement("span",{className:m("title")},t),l&&l.length?i.default.createElement("span",{className:m("prompt-text-wrapper")},"(Unsaved value is present and NavigationPrompt is rendered)"):null),i.default.createElement("input",{type:"text",className:m("input-text-box"),"aria-label":n,onChange:function(e){s.current={value:e.target.value},c(e.target.value)}}))};h.propTypes={title:l.default.string,ariaLabel:l.default.string};var f=function(e){var t=e.title,n=(0,i.useState)(Date.now()),a=(0,r.default)(n,2),o=a[0],l=a[1],c=(0,i.useRef)();return i.default.createElement("div",{className:m("form-content-wrapper")},i.default.createElement(p.NavigationPromptCheckpoint,{ref:c},i.default.createElement(i.default.Fragment,{key:o},i.default.createElement("h3",null,t),i.default.createElement("p",null,"The Form renders a NavigationPromptCheckpoint around its child Input components. If NavigationPrompts are rendered by any child components, the Form will resolve those prompts before resetting the Input values."),i.default.createElement("p",null,"Last Updated:"," ",new Date(o).toLocaleString()),i.default.createElement(h,{title:"Text Input A",ariaLabel:"Text Input A"}),i.default.createElement(h,{title:"Text Input B",ariaLabel:"Text Input B"}),i.default.createElement("br",null),i.default.createElement("button",{type:"button",onClick:function(){c.current.resolvePrompts({title:d,startMessage:u,rejectButtonText:"Descriptive Reject Button Action",acceptButtonText:"Descriptive Accept Button Action",buttonOrder:"acceptFirst"}).then((function(){l(Date.now())})).catch((function(){}))}},"Reset"),i.default.createElement("button",{type:"button",onClick:function(){l(Date.now())}},"Submit"))))};f.propTypes={title:l.default.string};var b=function(){var e=(0,i.useState)("Form 1"),t=(0,r.default)(e,2),n=t[0],a=t[1],o=(0,i.useRef)();function l(e){o.current.resolvePrompts({title:d,startMessage:u,rejectButtonText:"Descriptive Reject Button Action",acceptButtonText:"Descriptive Accept Button Action",buttonOrder:"acceptFirst"}).then((function(){a(e)})).catch((function(){}))}return i.default.createElement("div",null,i.default.createElement("h2",null,"Form Switcher"),i.default.createElement("p",null,"The FormSwitcher is an example component that uses the NavigationPrompt and NavigationPromptCheckpoint. If NavigationPrompts are rendered by any child components, the FormSwitcher will resolve those prompts before rendering a different Form."),i.default.createElement("button",{type:"button",disabled:"Form 1"===n,onClick:l.bind(null,"Form 1")},"Switch to Form 1"),i.default.createElement("button",{type:"button",disabled:"Form 2"===n,onClick:l.bind(null,"Form 2")},"Switch to Form 2"),i.default.createElement("br",null),i.default.createElement("br",null),i.default.createElement(p.NavigationPromptCheckpoint,{ref:o},i.default.createElement(f,{title:n,key:n})))},g=function(){var e=(0,i.useState)([]),t=(0,r.default)(e,2),n=t[0],a=t[1];return i.default.createElement("div",{className:m("example-content-wrapper")},i.default.createElement("span",{className:m("title")},"Registered Prompts: "),n.length?i.default.createElement("span",null,n.map((function(e){return"".concat(e.description," (").concat(e.metaData.value,")")})).join(", ")):null,i.default.createElement("br",null),i.default.createElement("hr",null),i.default.createElement(p.NavigationPromptCheckpoint,{onPromptChange:function(e){a(e)}},i.default.createElement(b,null)))};t.default=g},2529:function(e,t,n){e.exports={"form-content-wrapper":"NavigationPromptExample-module__form-content-wrapper___3eg54","example-content-wrapper":"NavigationPromptExample-module__example-content-wrapper___1AFJ4",title:"NavigationPromptExample-module__title___1fFTP","input-text-box":"NavigationPromptExample-module__input-text-box___3e67q","prompt-text-wrapper":"NavigationPromptExample-module__prompt-text-wrapper____GDPY","input-content-wrapper":"NavigationPromptExample-module__input-content-wrapper___GS8tT","content-wrapper":"NavigationPromptExample-module__content-wrapper___7czwc"}},3141:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return S}));var a=n(0),o=n.n(a),r=n(365),i=n(1215),l=n(1013),c=n.n(l);function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var m=function(){return Object(r.mdx)(c.a,{rows:[{name:"description",type:function(){var e={};function t(t){var n=t.components,a=s(t,["components"]);return Object(r.mdx)("wrapper",p({},e,a,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"string"))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"none",description:function(){var e={};function t(t){var n=t.components,a=s(t,["components"]);return Object(r.mdx)("wrapper",p({},e,a,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"A string describing the content or concept for which the NavigationPrompt is being rendered."))}return t.isMDXComponent=!0,t({})}},{name:"metaData",type:function(){var e={};function t(t){var n=t.components,a=s(t,["components"]);return Object(r.mdx)("wrapper",p({},e,a,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"object"))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"none",description:function(){var e={};function t(t){var n=t.components,a=s(t,["components"]);return Object(r.mdx)("wrapper",p({},e,a,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"An object containing any other pertinent information related to the NavigationPrompt."))}return t.isMDXComponent=!0,t({})}}]})};function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function u(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var h=function(){return Object(r.mdx)(c.a,{rows:[{name:"children",type:function(){var e={};function t(t){var n=t.components,a=u(t,["components"]);return Object(r.mdx)("wrapper",d({},e,a,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"node"))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"none",description:function(){var e={};function t(t){var n=t.components,a=u(t,["components"]);return Object(r.mdx)("wrapper",d({},e,a,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"Components to render within the context of the NavigationPromptCheckpoint. Any NavigationPrompts rendered within\nthese child components will be registered to this NavigationPromptCheckpoint instance."))}return t.isMDXComponent=!0,t({})}},{name:"onPromptChange",type:function(){var e={};function t(t){var n=t.components,a=u(t,["components"]);return Object(r.mdx)("wrapper",d({},e,a,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"func"))}return t.isMDXComponent=!0,t({})},required:!1,defaultValue:"none",description:function(){var e={};function t(t){var n=t.components,a=u(t,["components"]);return Object(r.mdx)("wrapper",d({},e,a,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"A function that will be executed when NavigationPrompts are registered to or unregistered from the NavigationPromptCheckpoint instance.\nThis can be used to track registered prompts outside of a NavigationPromptCheckpoint and handle prompt resolution directly, if necessary.\nThe function will be provided with an array of data objects representing the registered NavigationPrompts as the sole argument. An empty\nArray will be provided when no prompts are registered."),Object(r.mdx)("p",null,"Function Example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",d({parentName:"pre"},{}),"(arrayOfPrompts) => {\n  arrayOfPrompts.forEach((prompt) => {\n    console.log(prompt.description);\n    console.log(prompt.metaData);\n  })\n  this.myLocalPromptRegistry = arrayOfPrompts;\n}\n")))}return t.isMDXComponent=!0,t({})}}]})},f=n(2528),b=n.n(f);function g(){return(g=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function v(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var x={};function y(e){var t=e.components,n=v(e,["components"]);return Object(r.mdx)("wrapper",g({},x,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("pre",null,Object(r.mdx)("code",g({parentName:"pre"},{className:"language-jsx"}),"import React, { useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames/bind';\nimport NavigationPrompt, { NavigationPromptCheckpoint } from 'terra-navigation-prompt';\nimport styles from './NavigationPromptExample.module.scss';\n\nconst cx = classNames.bind(styles);\n\nconst exampleTitle = 'Descriptive Notification Prompt Title';\nconst exampleMessage = 'A Notification Prompt usually has an introductory warning instructing the user that there are unsaved changes or that there is a similar situation that warrants capturing the user\\'s attention and requires that they take action before continuing.\\n\\nIt is good practice to include details about the originating source (page name, side-panel title, modal header title, etc.) and location description (form name, title from the section of the page, general position, etc.) to provide the user a contextual reference as to where they have an area needing attention: e.g. where data is about to be lost, the window about to be closed, the section about to be removed. Following the initial details, it is helpful to include a detailed description educating the user about any danger or caution as to what will happen to the current items about to be lost (form data, page content, etc.) if the user chooses each of the two actions provided in the notification prompt message.';\nconst exampleRejectButtonText = 'Descriptive Reject Button Action';\nconst exampleAcceptButtonText = 'Descriptive Accept Button Action';\nconst exampleButtonOrder = 'acceptFirst';\n\n/**\n * The Input is a stateful component that renders a NavigationPrompt based upon its current input element value.\n * It provides its NavigationPrompt with a description and a metaData object containing its current value.\n */\nconst Input = ({ title, ariaLabel }) => {\n  const [inputValue, setInputValue] = useState('');\n  const promptMetaData = useRef({\n    value: '',\n  });\n\n  /**\n   * The Input renders a NavigationPrompt when it wants to communicate the presence of its unresolved\n   * state.\n   */\n  return (\n    <div className={cx('input-content-wrapper')}>\n      {inputValue && inputValue.length ? <NavigationPrompt description={title} metaData={promptMetaData.current} /> : null}\n      <div className={cx('content-wrapper')}>\n        <span className={cx('title')}>{title}</span>\n        {inputValue && inputValue.length ? <span className={cx('prompt-text-wrapper')}>(Unsaved value is present and NavigationPrompt is rendered)</span> : null}\n      </div>\n      <input\n        type=\"text\"\n        className={cx('input-text-box')}\n        aria-label={ariaLabel}\n        onChange={(event) => {\n          promptMetaData.current = {\n            value: event.target.value,\n          };\n\n          setInputValue(event.target.value);\n        }}\n      />\n    </div>\n  );\n};\n\nInput.propTypes = {\n  title: PropTypes.string,\n  ariaLabel: PropTypes.string,\n};\n\n/**\n * The Form renders two Input components to demonstrate the the registration logic of multiple concurrent NavigationPrompts.\n * The Form also renders a NavigationPromptCheckpoint around those Inputs in order to demonstrate the NavigationPromptCheckpoint's ability to\n * render a custom title/message during prompt resolution.\n *\n * Before the Form's Reset action can occur, the Form resolves the prompts below its checkpoint with a custom title and message featuring the\n * registered prompts' descriptions and metaData. If the user confirms the Reset, the Input components are unmounted and replaced with new instances\n * that have no unsaved changes (and thus render no NavigationPrompts). If the user denies the Reset, no action is taken.\n *\n * The Form's Submit action does not prompt the user before clearing the Input values, demonstrating that the onus is on the Form, not the Input, to trigger\n * the prompt resolver when necessary.\n */\nconst Form = ({ title }) => {\n  const [timeStamp, setTimeStamp] = useState(Date.now());\n  const inputCheckpointRef = useRef();\n\n  return (\n    <div className={cx('form-content-wrapper')}>\n      <NavigationPromptCheckpoint\n        ref={inputCheckpointRef}\n      >\n        <React.Fragment key={timeStamp}>\n          <h3>{title}</h3>\n          <p>The Form renders a NavigationPromptCheckpoint around its child Input components. If NavigationPrompts are rendered by any child components, the Form will resolve those prompts before resetting the Input values.</p>\n          <p>\n            Last Updated:\n            {' '}\n            {new Date(timeStamp).toLocaleString()}\n          </p>\n          <Input title=\"Text Input A\" ariaLabel=\"Text Input A\" />\n          <Input title=\"Text Input B\" ariaLabel=\"Text Input B\" />\n          <br />\n          <button\n            type=\"button\"\n            onClick={() => {\n              inputCheckpointRef.current.resolvePrompts({\n                title: exampleTitle,\n                startMessage: exampleMessage,\n                rejectButtonText: exampleRejectButtonText,\n                acceptButtonText: exampleAcceptButtonText,\n                buttonOrder: exampleButtonOrder,\n              }).then(() => {\n                setTimeStamp(Date.now());\n              }).catch(() => {\n                // User prevented navigation.\n              });\n            }}\n          >\n            Reset\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => {\n              setTimeStamp(Date.now());\n            }}\n          >\n            Submit\n          </button>\n        </React.Fragment>\n      </NavigationPromptCheckpoint>\n    </div>\n  );\n};\n\nForm.propTypes = {\n  title: PropTypes.string,\n};\n\n/**\n * The FormSwitcher toggles between two versions a Form to demonstrate the functionality of nested NavigationPromptCheckpoints.\n * Any NavigationPrompt registered to the Form's checkpoint will also be registered to the FormSwitcher's checkpoint.\n *\n * Before the FormSwitcher changes the Form type, the FormSwitcher resolves the prompts below its checkpoint with the default prompt title and message.\n * If the user confirms the switch, the Form component is unmounted and replace with a new version containing no unsaved changes. If the user denies the switch,\n * no action is taken.\n */\nconst FormSwitcher = () => {\n  const [activeForm, setActiveForm] = useState('Form 1');\n  const formCheckpointRef = useRef();\n\n  function onSwitchForm(formKey) {\n    formCheckpointRef.current.resolvePrompts({\n      title: exampleTitle,\n      startMessage: exampleMessage,\n      rejectButtonText: exampleRejectButtonText,\n      acceptButtonText: exampleAcceptButtonText,\n      buttonOrder: exampleButtonOrder,\n    }).then(() => {\n      setActiveForm(formKey);\n    }).catch(() => {\n      // User prevented form switch.\n    });\n  }\n\n  return (\n    <div>\n      <h2>Form Switcher</h2>\n      <p>The FormSwitcher is an example component that uses the NavigationPrompt and NavigationPromptCheckpoint. If NavigationPrompts are rendered by any child components, the FormSwitcher will resolve those prompts before rendering a different Form.</p>\n      <button\n        type=\"button\"\n        disabled={activeForm === 'Form 1'}\n        onClick={onSwitchForm.bind(null, 'Form 1')}\n      >\n        Switch to Form 1\n      </button>\n      <button\n        type=\"button\"\n        disabled={activeForm === 'Form 2'}\n        onClick={onSwitchForm.bind(null, 'Form 2')}\n      >\n        Switch to Form 2\n      </button>\n      <br />\n      <br />\n      <NavigationPromptCheckpoint ref={formCheckpointRef}>\n        <Form title={activeForm} key={activeForm} />\n      </NavigationPromptCheckpoint>\n    </div>\n  );\n};\n\n/**\n * The NavigationPromptExample renders a NavigationPromptCheckpoint around the FormSwitcher to demonstrate the\n * functionality of the onPromptChange callback. onPromptChange receives the current set of prompts as its first argument,\n * and it executes whenever a NavigationPrompt registers or unregisters with a NavigationPromptCheckpoint.\n */\nconst NavigationPromptExample = () => {\n  const [prompts, setPrompts] = useState([]);\n\n  return (\n    <div className={cx('example-content-wrapper')}>\n      <span className={cx('title')}>Registered Prompts: </span>\n      {prompts.length ? <span>{prompts.map(prompt => `${prompt.description} (${prompt.metaData.value})`).join(', ')}</span> : null}\n      <br />\n      <hr />\n      <NavigationPromptCheckpoint\n        onPromptChange={(newPrompts) => {\n          setPrompts(newPrompts);\n        }}\n      >\n        <FormSwitcher />\n      </NavigationPromptCheckpoint>\n    </div>\n  );\n};\n\nexport default NavigationPromptExample;\n\n")))}y.isMDXComponent=!0;var _=n(1010),N=n.n(_);function O(){return(O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function j(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var w={};function P(e){var t=e.components,n=j(e,["components"]);return Object(r.mdx)("wrapper",O({},w,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("pre",null,Object(r.mdx)("code",O({parentName:"pre"},{className:"language-scss"}),":local {\n  .form-content-wrapper {\n    border: 1px solid #d3d3d3;\n    padding: 10px;\n  }\n\n  .example-content-wrapper {\n    padding: 10px;\n  }\n\n  .title {\n    font-weight: bold;\n  }\n\n  .input-text-box {\n    font-size: 16px;\n    width: 100%;\n  }\n\n  .prompt-text-wrapper {\n    font-style: italic;\n    padding-left: 5px;\n  }\n\n  .input-content-wrapper,\n  .content-wrapper {\n    padding-bottom: 10px;\n  }\n}\n\n")))}P.isMDXComponent=!0;var T=function(e){var t=e.title,n=e.description,a=e.isExpanded;return o.a.createElement(N.a,{title:t||"Navigation Prompt Example",description:n,example:o.a.createElement(b.a,null),exampleCssSrc:o.a.createElement(P,null),exampleSrc:o.a.createElement(y,null),isExpanded:a})};function C(){return(C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function E(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var k={};function S(e){var t=e.components,n=E(e,["components"]);return Object(r.mdx)("wrapper",C({},k,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)(i.a,{mdxType:"Badge"}),Object(r.mdx)("h1",{id:"terra-navigation-prompt"},"Terra Navigation Prompt"),Object(r.mdx)("p",null,"The NavigationPrompt and NavigationPromptCheckpoint components allow for the detection and management of components with unsaved state."),Object(r.mdx)("h2",{id:"getting-started"},"Getting Started"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Install with ",Object(r.mdx)("a",C({parentName:"li"},{href:"https://www.npmjs.com/"}),"npmjs"),":",Object(r.mdx)("ul",{parentName:"li"},Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"npm install terra-navigation-prompt")))),Object(r.mdx)("li",{parentName:"ul"},"Import the module",Object(r.mdx)("ul",{parentName:"li"},Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"import NavigationPrompt, { NavigationPromptCheckpoint } from 'terra-navigation-prompt';"))))),Object(r.mdx)("p",null,"This package uses React's Context for inter-component communication. A single instance of this package must be installed to ensure that communication occurs between all Context Providers and Consumers. To help ensure a single instance is installed, this package should be defined as a peer dependency in packages that are reusable libraries or otherwise consumed by other packages."),Object(r.mdx)("h2",{id:"peer-dependencies"},"Peer Dependencies"),Object(r.mdx)("p",null,"This component requires the following peer dependencies be installed in your app for the component to properly function."),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",C({parentName:"tr"},{align:null}),"Peer Dependency"),Object(r.mdx)("th",C({parentName:"tr"},{align:null}),"Version"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"react"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"^16.8.0")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"react-dom"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"^16.8.0")))),Object(r.mdx)("h2",{id:"rationale"},"Rationale"),Object(r.mdx)("p",null,"A React component has complete control over its own rendering logic. It can render child components and un-mount those child components as it sees fit. It follows that any individual component has no direct control over its own mounting and un-mounting; it is rendered (or not) at the discretion of its parent. A component must rely on its lifecycle events to determine how it is being implemented."),Object(r.mdx)("p",null,"However, a component's children can be stateful and responsible for important user input or interactions. If the user can navigate away from that child component, it may be necessary for that child component to notify the user that their workflow is incomplete or that some transient state has not yet been persisted. If the component has no control over its own unmounting, how can it communicate this state to the overall application before the component is already being unmounted?"),Object(r.mdx)("p",null,"The most straightforward solution is to lift the state up. If the child component's state is lifted into a parent component, it can either be more directly managed by the parent component or persisted indefinitely. ",Object(r.mdx)("strong",{parentName:"p"},"This is the strategy that should be implemented by most components.")," However, for very large applications or highly composable applications built out of many stateful components, lifting the state may not be feasible."),Object(r.mdx)("p",null,"Another solution is to expose callbacks from the stateful child components. Whenever the stateful components' state changes, these callbacks would be executed to notify the parent component of the updated state. This works well at a small scale, but this becomes hard to maintain as the component tree increases in depth. One would have to chain these callbacks many levels deep to ensure every component is kept abreast of the current state, and every component, even those without these state concerns, would have to adhere to a consistent prop interface for those callbacks."),Object(r.mdx)("p",null,"The ",Object(r.mdx)("inlineCode",{parentName:"p"},"NavigationPrompt")," and the ",Object(r.mdx)("inlineCode",{parentName:"p"},"NavigationPromptCheckpoint")," were created to smooth over the rough edges of the aforementioned strategies. By using this package, state can remain localized to the components that own it, and the presence of transient child state can be determined after each render without impacting every component in the tree."),Object(r.mdx)("h2",{id:"usage"},"Usage"),Object(r.mdx)("h3",{id:"navigationprompt"},Object(r.mdx)("inlineCode",{parentName:"h3"},"NavigationPrompt")),Object(r.mdx)("p",null,"When a component renders a NavigationPrompt, it tells its parent components two things: that the component is in the middle of something important, and that users may care about the component going away."),Object(r.mdx)("p",null,"The NavigationPrompt can be rendered with two props: a ",Object(r.mdx)("inlineCode",{parentName:"p"},"description")," string that gives context to the NavigationPrompt, and a ",Object(r.mdx)("inlineCode",{parentName:"p"},"metaData")," object that can be used to provide additional data that may be relevant to the NavigationPrompt."),Object(r.mdx)("p",null,"The NavigationPrompt can be rendered like any other component, but prop consistency should be maintained between renders when possible. Creating a new object for the ",Object(r.mdx)("inlineCode",{parentName:"p"},"metaData")," prop within a render function will cause the NavigationPrompt to re-register itself during every update:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",C({parentName:"pre"},{className:"language-jsx"}),"render() {\n  return (\n    <NavigationPrompt\n      description=\"This prompt will register and notify every time the component renders\"\n      metaData={{ important: 'info' }}\n    />\n  );\n}\n")),Object(r.mdx)("p",null,"To prevent duplicate registrations, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"metaData")," value can be stored inside a component's state or an internal property and updated only when necessary:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",C({parentName:"pre"},{className:"language-diff"}),"+ constructor() {\n+   this.state = {\n+     metaDataValue: {\n+       important: 'info',\n+     }\n+   }\n+ }\n\nrender() {\n  return (\n    <NavigationPrompt\n-     description=\"This prompt will register and notify every time the component renders\"\n-     metaData={{ important: 'info' }}\n+     description=\"My props are consistent between renders, so this prompt will not re-register or notify\"\n+     metaData={this.state.metaDataValue}\n    />\n  );\n}\n")),Object(r.mdx)("h3",{id:"navigationpromptcheckpoint"},Object(r.mdx)("inlineCode",{parentName:"h3"},"NavigationPromptCheckpoint")),Object(r.mdx)("p",null,"Any component that navigates between stateful child components should render NavigationPromptCheckpoints around those children. Each NavigationPrompt rendered by a child will be registered to the NavigationPromptCheckpoints above it in the component tree. The implementer of each NavigationPromptCheckpoint can use the registered data to prompt the user before navigating or prevent navigation altogether."),Object(r.mdx)("h4",{id:"onpromptchange"},Object(r.mdx)("inlineCode",{parentName:"h4"},"onPromptChange")),Object(r.mdx)("p",null,"The ",Object(r.mdx)("inlineCode",{parentName:"p"},"onPromptChange")," function prop is used to communicate NavigationPrompt registrations to the implementer of a NavigationPromptCheckpoint. The function is called with an array of objects containing each registered NavigationPrompt's ",Object(r.mdx)("inlineCode",{parentName:"p"},"description")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"metaData")," properties."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"Note: The ",Object(r.mdx)("inlineCode",{parentName:"p"},"onPromptChange")," prop will be called after each NavigationPrompt registration and removal. It may be called more than once with the same array of NavigationPrompt data. Calls to ",Object(r.mdx)("inlineCode",{parentName:"p"},"setState")," within onPromptChange should be performed only when necessary to minimize component updates.")),Object(r.mdx)("h4",{id:"resolveprompts"},Object(r.mdx)("inlineCode",{parentName:"h4"},"resolvePrompts")),Object(r.mdx)("p",null,"The ",Object(r.mdx)("inlineCode",{parentName:"p"},"resolvePrompts")," function can be accessed from the ref to a NavigationPromptCheckpoint. Calling ",Object(r.mdx)("inlineCode",{parentName:"p"},"resolvePrompts")," results in a Promise being returned and a NotificationDialog being presented to the user with options to either confirm or cancel their action. If the user confirms the action, the dialog will close, and the returned Promise will be resolved. If the user cancels the action, the dialog will close, and the returned Promise will be rejected. If no NavigationPrompts are detected, no dialog is presented, and the returned Promise will be resolved."),Object(r.mdx)("p",null,Object(r.mdx)("inlineCode",{parentName:"p"},"resolvePrompts")," accepts either an Object or function argument. The Object should contain the text strings used to render the NotificationDialog. The function should return an Object containing the text strings used to render the NotificationDialog. Additionally, the function will receive an array of registered NavigationPrompts as an argument. The array of prompts can be used to create dynamic strings based on the current set of registered prompts."),Object(r.mdx)("p",null,"The keys expected in the resolvePrompts Object or return value include:"),Object(r.mdx)("table",null,Object(r.mdx)("thead",{parentName:"table"},Object(r.mdx)("tr",{parentName:"thead"},Object(r.mdx)("th",C({parentName:"tr"},{align:null}),"Key"),Object(r.mdx)("th",C({parentName:"tr"},{align:null}),"Type"),Object(r.mdx)("th",C({parentName:"tr"},{align:null}),"Description"))),Object(r.mdx)("tbody",{parentName:"table"},Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"title")),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"String"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"The title of the NotificationDialog.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"message")),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"String"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"Deprecated, The message of the NotificationDialog. Resolves to 'startMessage'")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"startMessage")),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"String"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"The starting message of the NotificationDialog.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"content")),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"Node"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"The content of the NotificationDialog.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"endMessage")),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"String"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"The ending message of the NotificationDialog.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"acceptButtonText")),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"String"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"The text to render within the NotificationDialog's accept button.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"rejectButtonText")),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"String"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"The text to render within the NotificationDialog's reject button.")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"buttonOrder")),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"String"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"A string indicating which action should be rendered first, required. Supported values include: ",Object(r.mdx)("inlineCode",{parentName:"td"},"acceptFirst"),", ",Object(r.mdx)("inlineCode",{parentName:"td"},"rejectFirst"),".")),Object(r.mdx)("tr",{parentName:"tbody"},Object(r.mdx)("td",C({parentName:"tr"},{align:null}),Object(r.mdx)("inlineCode",{parentName:"td"},"emphasizedAction")),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"String"),Object(r.mdx)("td",C({parentName:"tr"},{align:null}),"A string indicating which action should be rendered as emphasized. Supported values include: ",Object(r.mdx)("inlineCode",{parentName:"td"},"accept"),", ",Object(r.mdx)("inlineCode",{parentName:"td"},"reject"),", and ",Object(r.mdx)("inlineCode",{parentName:"td"},"none"),". Defaults to ",Object(r.mdx)("inlineCode",{parentName:"td"},"none"),".")))),Object(r.mdx)("pre",null,Object(r.mdx)("code",C({parentName:"pre"},{className:"language-jsx"}),"const ResolvePromptExample = () => {\n  const [contentKey, setContentKey] = useState(false);\n  const checkpointRef = useRef();\n\n  /**\n   * This resolvePrompts implementation provides an Object directly.\n   */\n  const resetWithStaticText = () => {\n    checkpointRef.current.resolvePrompts({\n      title: 'Pending Changes',\n      startMessage: 'Data will be lost if this action is taken',\n      rejectButtonText: `Return`,\n      acceptButtonText: 'Continue without Saving',\n      buttonOrder: 'acceptFirst',\n    }).then(() => {\n      // User decided to continue\n      setContentKey({ contentKey: !state.contentKey });\n    }).catch(() => {\n      // User decided to cancel, so the state is not updated.\n    });\n  };\n\n  /**\n   * This resolvePrompts implementation provides a function that builds dynamic strings and return\n   * an Object.\n   */\n  const resetWithDynamicText = () => {\n    checkpointRef.current.resolvePrompts(prompts => ({\n      title: prompts.map(prompt => prompt.description).join(', '),\n      startMessage: `Data will be lost in the following sections: ${prompts.map(prompt => prompt.description).join(', ')}`,\n      rejectButtonText: `Return`,\n      acceptButtonText: 'Continue without Saving',\n    })).then(() => {\n      // User decided to continue\n      setContentKey({ contentKey: !state.contentKey });\n    }).catch(() => {\n      // User decided to cancel, so the state is not updated.\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={resetWithStaticText}>\n        Reset (Static Message)\n      </button>\n      <button onClick={resetWithDynamicText}>\n        Reset (Dynamic Message)\n      </button>\n      <NavigationPromptCheckpoint\n        ref={checkpointRef}\n      >\n        <Form key={contentKey} />\n      </NavigationPromptCheckpoint>\n    </div>\n  )\n}\n")),Object(r.mdx)("h2",{id:"extending-the-navigationprompt"},"Extending the NavigationPrompt"),Object(r.mdx)("p",null,"The various APIs provided and consumed by the NavigationPrompt and NavigationPromptCheckpoint are purposefully broad and nonrestrictive. If more defined or restricted APIs are desirable for a application platform, these components can and should be wrapped by components that provide the necessary interfaces."),Object(r.mdx)("h2",{id:"component-features"},"Component Features"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("a",C({parentName:"li"},{href:"https://engineering.cerner.com/terra-ui/contributing/terra-ui/component-standards#cross-browser-support"}),"Cross-Browser Support"))),Object(r.mdx)("h2",{id:"examples"},"Examples"),Object(r.mdx)(T,{mdxType:"NavigationPromptExample"}),Object(r.mdx)("h2",{id:"navigation-prompt-props-table"},"Navigation Prompt Props Table"),Object(r.mdx)(m,{mdxType:"NavigationPromptPropsTable"}),Object(r.mdx)("h2",{id:"navigation-prompt-checkpoint-props-table"},"Navigation Prompt Checkpoint Props Table"),Object(r.mdx)(h,{mdxType:"NavigationPromptCheckpointPropsTable"}))}S.isMDXComponent=!0}}]);
//# sourceMappingURL=143-8c052f08201b4156531f.js.map